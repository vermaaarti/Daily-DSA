Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.

///////////////////////////  1st method
class Solution {
public:
    bool isAnagram(string s, string t) {


      if (s.length() != t.length()) {
        return false;
    }
    
    unordered_map<char, int> Map;
  
    for (int i = 0; i < s.length(); i++) {
        Map[s[i]]++;
    }
  
    for (int i = 0; i < t.length(); i++) {
      
        if (Map.find(t[i]) != Map.end()) {
       
            Map[t[i]] -= 1;
        }
        else {
            return false;
        }
    }
 
    for (auto items : Map) {
        if (items.second != 0) {
            return false;
        }
    }
    
    return true;
    }
};



//////////////////////////////   2nd method
 int count1[256] = { 0 };
    int count2[256] = { 0 };
    int i;
 
    for (i = 0; s[i] && t[i]; i++) {
        count1[s[i]]++;
        count2[t[i]]++;
    }
 
    // for different length string
    if (s[i] || t[i])
        return false;
 
    // Compare count arrays
    for (i = 0; i < 256; i++)
        if (count1[i] != count2[i])
            return false;
 
    return true;


    ////////////////////////////////////   3rd method
     bool isAnagram(string s, string t) {
        int n= s.size();
        int m = t.size();
    //    unordered_map<char, int>mpp;
    //    for(int i=0; i<n; i++){

    //    } 
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    if(s==t) return true;
    return false;
    }



    //////////////////////////////  4th method

     bool isAnagram(string s, string t) {
        int n1, n2;
        n1=s.length();
        n2=t.length();
        if(n1!=n2)return false;
        sort(s.begin(), s.end());
        sort(t.begin(),t.end());
        for(int i=0; i<n1; i++)
            if(s[i] != t[i])

return false;
  return true;
       
    }

  //////////////////////////////////////////////////
     