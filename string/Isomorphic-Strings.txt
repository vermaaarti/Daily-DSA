Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.


class Solution {
public:
    bool isIsomorphic(string s, string t) {
      if(s.size() != t.size()) return false;
      unordered_map<char, char>mpp;
        for(int i=0; i<256; i++){
        mpp.first.push(s);
        }
    }
};


or-----------------------------


#include <bits/stdc++.h> 

bool areIsomorphic(string &str1, string &str2)
{
    // Write your code here
  
    int n = str1.size();
    int m = str2.size(); 
      if(n!=m) return false;
    unordered_map<char, int>mpp1, mpp2;

    for(int i=0; i<n; i++){
     if(mpp1[str1[i]] != mpp2[str2[i]])
     return false;

     mpp1[str1[i]] = i+1;
     mpp2[str2[i]] = i+1;
    }
        return true;
}


or---------------------------------------


#include <bits/stdc++.h> 

bool areIsomorphic(string &str1, string &str2)
{
    int n = str1.size(), m = str2.size();
    if(n!=m)return 0;
    unordered_map<char,char>mp1,mp2;

    for(int i=0;i<n;i++){
        if(mp1.find(str1[i]) == mp1.end() &&
           mp2.find(str2[i]) == mp2.end()){
            mp1[str1[i]] = str2[i];
            mp2[str2[i]] = str1[i];
        }
        else{
            if(mp1[str1[i]]!=str2[i])return false;
            if(mp2[str2[i]]!=str1[i])return false;
        }
    }

    return true;
}
