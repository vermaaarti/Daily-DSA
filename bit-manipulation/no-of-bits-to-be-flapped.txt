Given two integers A and B, the task is to count the number of bits needed to be flipped to convert A to B.
Examples: 
 

Input: A = 10, B = 7 
Output: 3 
binary(10) = 1010 
binary(7) = 0111 
1010 
0111 
3 bits need to be flipped.
Input: A = 8, B = 7 
Output: 4 
 

 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Approach: An approach to solve this problem has already been discussed here. Here, the count of bits that need to be flipped can be found by matching all the bits in both the integers one by one. If the bit under consideration differs then increment the count.
Below is the implementation of the above approach: 
 


// C++ implementation of the approach
#include <bits/stdc++.h>
using namespace std;
 
// Function to return the count of bits
// to be flipped to convert a to b
int countBits(int a, int b)
{
 
    // To store the required count
    int count = 0;
 
    // Loop until both of them become zero
    while (a || b) {
 
        // Store the last bits in a
        // as well as b
        int last_bit_a = a & 1;
        int last_bit_b = b & 1;
 
        // If the current bit is not same
        // in both the integers
        if (last_bit_a != last_bit_b)
            count++;
 
        // Right shift both the integers by 1
        a = a >> 1;
        b = b >> 1;
    }
 
    // Return the count
    return count;
}
 
// Driver code
int main()
{
    int a = 10, b = 7;
 
    cout << countBits(a, b);
 
    return 0;
}
Output: 
3

Time Complexity: O(min(log a, log b))

Auxiliary Space: O(1)