Given a string S, Find all the possible subsequences of the String in lexicographically-sorted order.

Example 1:

Input : str = "abc"
Output: a ab abc ac b bc c
Explanation : There are 7 subsequences that 
can be formed from abc.
Example 2:

Input: str = "aa"
Output: a a aa
Explanation : There are 3 subsequences that 
can be formed from aa.
Your Task:
You don't need to read input or print anything. Your task is to complete the function AllPossibleStrings() which takes S as the input parameter and returns a list of all possible subsequences (non-empty) that can be formed from S in lexicographically-sorted order.

Expected Time Complexity: O(n*2n) where n is the length of the String
Expected Space Complexity: O(n * 2n)
 

Constraints: 
1 <= Length of String <= 16



	public:
		vector<string> AllPossibleStrings(string s){
		    // Code here
		    vector<string>ans;
		    int n = pow(2, s.length());
		    for(int i=1; i<n; i++){
		      int x = i;
		      int y = 0;
		      string c = "";
		      while(x){
		          if(x&1){
		          c = c+s[y];
		          }
		          y++;
		          x = x>>1;
		      }
		      ans.push_back(c);
		    }
		    sort(ans.begin(), ans.end());
		    return ans;
		}

        TC = O(2^n*log(n))
        SC = O(2^n)
