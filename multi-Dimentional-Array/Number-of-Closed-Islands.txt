Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.


Example 1:


Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).
Example 2:



Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1
Example 3:

Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2
 

Constraints:

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1

Approach=-----------------------------------------
Intuition
To solve the problem, we can iterate through the grid, and for each unvisited land (grid[i][j] == 0 and !visited[i][j]),
 we can perform a depth-first search to check if it forms a closed island, i.e., all adjacent land is surrounded by water (1).

Approach
Initialize a variable count to keep track of the number of closed islands, and a boolean array visited t
keep track of visited land.
Iterate through the grid using two nested loops, i and j, for each unvisited land (grid[i][j] == 0 and
!visited[i][j]), perform a depth-first search to check if it forms a closed island. If it does, increment the
count.
In the depth-first search, we need to check if the current land is out of bounds or has already been visited
in which case we return true. If the current land is adjacent to water, we need to recursively check its four
neighbors (up, down, left, right) to see if they form a closed island. If any of the four neighbors is not in th
bounds or is adjacent to water, then the current land is not a closed island, and we return false. If all four
neighbors form a closed island, then the current land also forms a closed island, and we return true.
Finally, we return the count.
Complexity
Time complexity: O(mn)O(mn)O(mn),
 where m and n are the dimensions of the grid. We visit each land at and perform a constant
 amount of work for each land, so the total time complexity is linear in thgrid.

Space complexity: O(mn)O(mn)O(mn),
 for the visited boolean array



 class Solution {
public:

    bool dfs(vector<vector<int>>&grid, vector<vector<bool>>&visited, int i, int j){
        int m = grid.size();
        int n = grid[0].size();

        if(i<0 || i>=m || j<0 || j>=n){
            return false;
        }
       if(visited[i][j]){
           return true;
           }
        visited[i][j] = true;
        if(grid[i][j] == 1){
            return true;
        }   
        bool isClosed = true;
        isClosed &= dfs(grid, visited, i-1, j);
        isClosed &= dfs(grid, visited, i+1, j); 
        isClosed &= dfs(grid, visited, i, j-1);
        isClosed &= dfs(grid, visited, i, j+1);
        return isClosed;
    }
    int closedIsland(vector<vector<int>>& grid) {
     int m = grid.size();
     int n = grid[0].size();
     int count=0;

     vector<vector<bool>>visited(m, vector<bool>(n, false));

     for(int i =1; i<m-1; i++){
         for(int j=1; j<n-1; j++){
             if(grid[i][j]==0 && !visited[i][j]){
                 bool isClosed = dfs(grid, visited, i, j);
                 if(isClosed){
                     count++;
                 }
             }
         }
     }
      return count;       
    }
};