Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.
 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109


if return type is pair--------------------------------------------------------------------------------------------------
int firstOcc(vector <int> arr,int n,int key){        
    int s=0,e=n-1;    
    int mid=s+(e-s)/2;    
    int ans=-1;        
    while(s<=e){        
   if(arr[mid]==key){           
    ans = mid;            
    e=mid-1;        
    }        
    else if(key>arr[mid]){//go right            
    s=mid+1;       
     }       
      else{//go left           
       e=mid-1;        
       }       
        mid=s+(e-s)/2;    
        }    
        return ans; }

int lastOcc(vector <int> arr,int n,int key){       
     int s=0,e=n-1;    
     int mid=s+(e-s)/2;    
     int ans=-1;       
      while(s<=e){        
    if(arr[mid]==key){            
    ans = mid;            
    s=mid+1;       
     }       
     else if(key>arr[mid]){//go right           
      s=mid+1;        
      }       
   else{//go left           
    e=mid-1;        
    }        
    mid=s+(e-s)/2;   
     }   
      return ans; 
      }

  pair<int, int> firstAndLastPosition(vector<int>& arr,
   int n, int k) {   
       pair<int,int>prr;  
  prr.first= firstOcc(arr,n,k);
    prr.second=lastOcc(arr,n,k);     
   return prr;
    }


    if return type is vector----------------------------------------------------------------------------------
    class Solution {
public:

     int firstOcc(vector <int> arr,int n,int key){        
    int s=0,e=n-1;    
    int mid=s+(e-s)/2;    
    int ans=-1;        
    while(s<=e){        
   if(arr[mid]==key){           
    ans = mid;            
    e=mid-1;        
    }        
    else if(key>arr[mid]){//go right            
    s=mid+1;       
     }       
      else{//go left           
       e=mid-1;        
       }       
        mid=s+(e-s)/2;    
        }    
        return ans; }

int lastOcc(vector <int> arr,int n,int key){       
     int s=0,e=n-1;    
     int mid=s+(e-s)/2;    
     int ans=-1;       
      while(s<=e){        
    if(arr[mid]==key){            
    ans = mid;            
    s=mid+1;       
     }       
     else if(key>arr[mid]){//go right           
      s=mid+1;        
      }       
   else{//go left           
    e=mid-1;        
    }        
    mid=s+(e-s)/2;   
     }   
      return ans; 
      }

    vector<int> searchRange(vector<int>& nums, int target) {
       vector<int>num;
       int n = nums.size();
       int num1 = firstOcc(nums,n,target);
       int num2 = lastOcc(nums,n,target);
       num.push_back(num1);
       num.push_back(num2);  
       return num;
    }
};