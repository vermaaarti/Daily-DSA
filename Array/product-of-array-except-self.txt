Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
      int n = nums.size();
        
      vector<int>arr(n);
        
        arr[0] =1;
        for(int i=1; i<n; i++){
            arr[i] = arr[i-1] * nums[i-1];
        }
        int right =1;
        for(int i =n-1; i>=0; i--){
            if(i< n-1){
                right = right * nums[i+1];
            }
            arr[i] = arr[i]*right;
        }
       return arr;
    }
     
};

   

   int mod = 1000000007;
int *getProductArrayExceptSelf(int *arr, int n)
{
    int *ans = new int[n];
    long long currProd = 1;
    for(int i = 0 ; i < n ; i++)
    {   currProd = (currProd*arr[i]) % mod;
        ans[i] = currProd;
    }
    currProd = 1;
    for(int i = n-1 ; i > 0 ; i--)
    {
        ans[i] = (ans[i-1] * currProd) % mod;
        currProd = (currProd * arr[i]) % mod;
    }
    ans[0] = currProd;
    return ans;
    
}