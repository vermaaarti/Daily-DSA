You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.
 

Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75
Example 2:

Input: nums = [5], k = 1
Output: 5.00000


Constraints:

n == nums.length
1 <= k <= n <= 105
-104 <= nums[i] <= 104


 class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
int len=nums.size();
int i=0,j=0;
int sum=0;
double avg=1.0;
double maxi=INT_MIN;

//adding the jth element to the sum.
while(j<len){
    sum+=nums[j];

//making sure whether sum is of 4 elements.
if(j-i+1<k){
    j++;
}

//if sum is of k elements, then do what the problem asks for.
else if(j-i+1==k){
    avg=(double)sum/k;
maxi=max(maxi,avg);

//removing sum of first element because we are moving the window.
    sum-=nums[i];
    i++;
    j++;
}

}
return maxi;
    }
 };