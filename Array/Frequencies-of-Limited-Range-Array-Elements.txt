Given an array A[] of N positive integers which can contain integers from 1 to P where elements can be repeated or can be absent from the array. Your task is to count the frequency of all elements from 1 to N.
Note: The elements greater than N in the array can be ignored for counting and do modify the array in-place.


Example 1:

Input:
N = 5
arr[] = {2, 3, 2, 3, 5}
P = 5
Output:
0 2 2 0 1
Explanation: 
Counting frequencies of each array element
We have:
1 occurring 0 times.
2 occurring 2 times.
3 occurring 2 times.
4 occurring 0 times.
5 occurring 1 time.
Example 2:

Input:
N = 4
arr[] = {3,3,3,3}
P = 3
Output:
0 0 4 0
Explanation: 
Counting frequencies of each array element
We have:
1 occurring 0 times.
2 occurring 0 times.
3 occurring 4 times.
4 occurring 0 times.

Your Task:
You don't need to read input or print anything. Complete the function frequencycount() that takes the array and n as input parameters and modify the array itself in place to denote the frequency count of each element from 1 to N. i,e element at index 0 should represent the frequency of 1, and so on.


Can you solve this problem without using extra space (O(1) Space)?


Constraints:
1 ≤ N ≤ 105
1 ≤ P ≤ 4*104 
1 <= A[i] <= P


Examples:
Input: arr[] = {2, 3, 3, 2, 5}
Output: Below are frequencies of all elements
       1 -> 0
       2 -> 2
       3 -> 2
       4 -> 0
       5 -> 1
Explanation: Frequency of elements 1 is 
0, 2 is 2, 3 is 2, 4 is 0 and 5 is 1.

Input: arr[] = {4, 4, 4, 4}
Output: Below are frequencies of all elements
       1 -> 0
       2 -> 0
       3 -> 0
       4 -> 4
Explanation: Frequency of elements 1 is 
0, 2 is 0, 3 is 0 and 4 is 4.
Expected Approach:
Intuition
Create an extra frequency array of size n, as elements of the array, is in the range 1 to n. Use the extra space to store the frequency of all elements. Traverse the array and update the count of the current element. Finally, update the given array according to the frequency of all elements stored at their corresponding indices in the frequency array.

Implementation:
Create a frequency array of size n to store the frequency of elements from 1 to n.
Traverse the array from start to end.
For every element update frequncy[array[i]-1], i.e. frequency[array[i]-1]++
Run a loop from 0 to n and update the given array with frequency, i.e:- arr[i]= frequency[i]
Example:

int arr[] = {2, 3, 3, 2, 5}

Below are counts of all elements stored in the frequency array

Index	1	2	3	4	5
Count	0	2	2	0	1
Update the array according to the frequency arr[] = {0, 2, 2, 0, 1}

output: {0, 2, 2, 0, 1}

Complexity Analysis: 
Time Complexity: O(n). As a single traversal of array takes O(n) time.
Space Complexity: O(n). To store the frequency of all the elements in an array takes O(n) space.
Alternate Approach(Optimised)
Intuition
Idea: By making elements negative.

Approach: The idea is to traverse the given array, use elements as an index and store their counts at the index. Consider the basic approach, a Hashmap of size n is needed and the array is also of size n. So the array can be used as a hashmap, all the elements of the array are from 1 to n, i.e. all are positive elements. So the frequency can be stored as negative. This might lead to a problem. Let i-th element be a then the count should be stored at array[a-1], but when the frequency will be stored the element will be lost. To deal with this problem, first, replace the ith element by array[a-1] and then put -1 at array[a-1]. So our idea is to replace the element by frequency and store the element in the current index and if the element at array[a-1] is already negative, then it is already replaced by a frequency so decrement array[a-1].


 
Implementation:
Traverse the array from start to end.
For each element check if the element is less than or equal to zero or not. If negative or zero skip the element as it is the frequency and if the element is greater than N or P then also, because no need to calculate its frequency according to question states.
If an element (e = array[i] – 1 ) is positive, then check if array[e] is positive or not. If positive then that means it is the first occurrence of e in the array and replaces array[i] with array[e], i.earray[i] = array[e] and assign array[e] = -1. If array[e] is negative, then it is not the first occurrence, the update array[e] as array[e]– and update array[i] as array[i] = 0.
Again, traverse the array and check if element is negative that menas it is frequency so make them positive else if element is already positive that means is it skipped element(i.e it is greater than P or N) so make them zero because no need to calculate the frequency of these elements. 
class Solution{
    public:
    //Function to count the frequency of all elements from 1 to N in the array.
    void frequencyCount(vector<int>& arr,int N, int P)
    { 
        // code here
        int i = 0;
        while (i<N)
        {
            // If this element is already processed,
            // then nothing to do
            if (arr[i] <= 0 || arr[i]>N || arr[i]>P)
            {
                i++;
                continue;
            }
     
            // Find index corresponding to this element
            // For example, index for 5 is 4
            int elementIndex = arr[i]-1;
     
            // If the elementIndex has an element that is not
            // processed yet, then first store that element
            // to arr[i] so that we don't lose anything.
            if (arr[elementIndex] > 0)
            {
                arr[i] = arr[elementIndex];
     
                // After storing arr[elementIndex], change it
                // to store initial count of 'arr[i]'
                arr[elementIndex] = -1;
            }
            else
            {
                // If this is NOT first occurrence of arr[i],
                // then decrement its count.
                arr[elementIndex]--;
     
                // And initialize arr[i] as 0 means the element
                // 'i+1' is not seen so far
                arr[i] = 0;
                i++;
            }
        }
        for(int i=0;i<N;i++) {
            if(arr[i] < 0) arr[i] = -arr[i];
            else arr[i]=0;
        }
    }
};
Complexity Analysis: 
Time Complexity: O(n). As a single traversal of the array takes O(n) time.
Space Complexity: O(1). Since no extra space is needed.


